
TRAFFIC_PROJECT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000740  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000740  000007d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800062  00800062  000007d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000808  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000126c  00000000  00000000  0000097c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000832  00000000  00000000  00001be8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b9c  00000000  00000000  0000241a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a1  00000000  00000000  00003174  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000048a  00000000  00000000  00003615  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003a9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 11 02 	jmp	0x422	; 0x422 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 45 02 	call	0x48a	; 0x48a <main>
  8a:	0c 94 9e 03 	jmp	0x73c	; 0x73c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <app_init>:

void app_init(void)
{
	
	    //  CARS TRAFFIC LIGHTS INITILIZATION
	led_init(PORT_A,PIN0);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 36 02 	call	0x46c	; 0x46c <led_init>
	led_init(PORT_A,PIN1);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	0e 94 36 02 	call	0x46c	; 0x46c <led_init>
	led_init(PORT_A,PIN2);
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 36 02 	call	0x46c	; 0x46c <led_init>
		//  PEDESTRIAN TRAFFIC LIGHTS INITILIZATION
	led_init(PORT_B,PIN0);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 36 02 	call	0x46c	; 0x46c <led_init>
	led_init(PORT_B,PIN1);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	82 e4       	ldi	r24, 0x42	; 66
  b6:	0e 94 36 02 	call	0x46c	; 0x46c <led_init>
	led_init(PORT_B,PIN2);
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	82 e4       	ldi	r24, 0x42	; 66
  be:	0e 94 36 02 	call	0x46c	; 0x46c <led_init>
	    //  PUSH BUTTON INITIALAIZATION
    button_init(PORT_D,PIN2);
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	84 e4       	ldi	r24, 0x44	; 68
  c6:	0e 94 32 02 	call	0x464	; 0x464 <button_init>
        //  ENABLE GLOBAL INTERUPS AND INTO INTERUPT WITH RISING EDGE 
	interupt_INT0_EN();
  ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <interupt_INT0_EN>
        //  TIMER0 INITIALIZATION IN NORMAL MODE 
	timer0_init();
  ce:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <timer0_init>
  d2:	08 95       	ret

000000d4 <app_start>:
}
void app_start(void)
{
	if ((normal_mode==1)&&(car_led_state==0))
  d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	09 f0       	breq	.+2      	; 0xde <app_start+0xa>
  dc:	7a c0       	rjmp	.+244    	; 0x1d2 <app_start+0xfe>
  de:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <car_led_state>
  e2:	81 11       	cpse	r24, r1
  e4:	76 c0       	rjmp	.+236    	; 0x1d2 <app_start+0xfe>
	{
		switch(car_led_state)
  e6:	81 11       	cpse	r24, r1
  e8:	74 c0       	rjmp	.+232    	; 0x1d2 <app_start+0xfe>
		{
			case 0:
				led_on(car_port,car_green);
  ea:	62 e0       	ldi	r22, 0x02	; 2
  ec:	81 e4       	ldi	r24, 0x41	; 65
  ee:	0e 94 3a 02 	call	0x474	; 0x474 <led_on>
				led_on(ped_port,ped_red);
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	82 e4       	ldi	r24, 0x42	; 66
  f6:	0e 94 3a 02 	call	0x474	; 0x474 <led_on>
				led_off(car_port,car_red);
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	81 e4       	ldi	r24, 0x41	; 65
  fe:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
				led_off(car_port,car_yellow);
 102:	61 e0       	ldi	r22, 0x01	; 1
 104:	81 e4       	ldi	r24, 0x41	; 65
 106:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
                for (i=0;i<=25;i++)
 10a:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <i>
 10e:	0b c0       	rjmp	.+22     	; 0x126 <app_start+0x52>
                {
					
					if (normal_mode==0)
 110:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 114:	88 23       	and	r24, r24
 116:	59 f0       	breq	.+22     	; 0x12e <app_start+0x5a>
					break;
					
			        timer0_delay_200ms();
 118:	0e 94 91 03 	call	0x722	; 0x722 <timer0_delay_200ms>
			case 0:
				led_on(car_port,car_green);
				led_on(ped_port,ped_red);
				led_off(car_port,car_red);
				led_off(car_port,car_yellow);
                for (i=0;i<=25;i++)
 11c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 120:	8f 5f       	subi	r24, 0xFF	; 255
 122:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <i>
 126:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 12a:	8a 31       	cpi	r24, 0x1A	; 26
 12c:	88 f3       	brcs	.-30     	; 0x110 <app_start+0x3c>
					break;
					
			        timer0_delay_200ms();

                }
                for (i=0;i<=25;i++)
 12e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <i>
 132:	0f c0       	rjmp	.+30     	; 0x152 <app_start+0x7e>
				{
					led_toggle(car_port,car_yellow);
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	81 e4       	ldi	r24, 0x41	; 65
 138:	0e 94 42 02 	call	0x484	; 0x484 <led_toggle>
					timer0_delay_200ms();
 13c:	0e 94 91 03 	call	0x722	; 0x722 <timer0_delay_200ms>
					if (normal_mode==0)
 140:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 144:	88 23       	and	r24, r24
 146:	49 f0       	breq	.+18     	; 0x15a <app_start+0x86>
					break;
					
			        timer0_delay_200ms();

                }
                for (i=0;i<=25;i++)
 148:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 14c:	8f 5f       	subi	r24, 0xFF	; 255
 14e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <i>
 152:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 156:	8a 31       	cpi	r24, 0x1A	; 26
 158:	68 f3       	brcs	.-38     	; 0x134 <app_start+0x60>
					timer0_delay_200ms();
					if (normal_mode==0)
					break;
				}
				
				led_off(car_port,car_green);
 15a:	62 e0       	ldi	r22, 0x02	; 2
 15c:	81 e4       	ldi	r24, 0x41	; 65
 15e:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
				led_off(car_port,car_yellow);
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	81 e4       	ldi	r24, 0x41	; 65
 166:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
				led_on(car_port,car_red);
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	81 e4       	ldi	r24, 0x41	; 65
 16e:	0e 94 3a 02 	call	0x474	; 0x474 <led_on>
                for (i=0;i<=25;i++)
 172:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <i>
 176:	0b c0       	rjmp	.+22     	; 0x18e <app_start+0xba>
                {
	                timer0_delay_200ms();
 178:	0e 94 91 03 	call	0x722	; 0x722 <timer0_delay_200ms>
	                if (normal_mode==0)
 17c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 180:	88 23       	and	r24, r24
 182:	49 f0       	breq	.+18     	; 0x196 <app_start+0xc2>
				}
				
				led_off(car_port,car_green);
				led_off(car_port,car_yellow);
				led_on(car_port,car_red);
                for (i=0;i<=25;i++)
 184:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 188:	8f 5f       	subi	r24, 0xFF	; 255
 18a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <i>
 18e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 192:	8a 31       	cpi	r24, 0x1A	; 26
 194:	88 f3       	brcs	.-30     	; 0x178 <app_start+0xa4>
                {
	                timer0_delay_200ms();
	                if (normal_mode==0)
	                break;
                }
				for (i=0;i<=25;i++)
 196:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <i>
 19a:	0f c0       	rjmp	.+30     	; 0x1ba <app_start+0xe6>
				{
					led_toggle(car_port,car_yellow);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	81 e4       	ldi	r24, 0x41	; 65
 1a0:	0e 94 42 02 	call	0x484	; 0x484 <led_toggle>
					timer0_delay_200ms();
 1a4:	0e 94 91 03 	call	0x722	; 0x722 <timer0_delay_200ms>
					if (normal_mode==0)
 1a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ac:	88 23       	and	r24, r24
 1ae:	49 f0       	breq	.+18     	; 0x1c2 <app_start+0xee>
                {
	                timer0_delay_200ms();
	                if (normal_mode==0)
	                break;
                }
				for (i=0;i<=25;i++)
 1b0:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 1b4:	8f 5f       	subi	r24, 0xFF	; 255
 1b6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <i>
 1ba:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 1be:	8a 31       	cpi	r24, 0x1A	; 26
 1c0:	68 f3       	brcs	.-38     	; 0x19c <app_start+0xc8>
					led_toggle(car_port,car_yellow);
					timer0_delay_200ms();
					if (normal_mode==0)
					break;
				}
				led_off(car_port,car_red);
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	81 e4       	ldi	r24, 0x41	; 65
 1c6:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
				led_off(car_port,car_yellow);
 1ca:	61 e0       	ldi	r22, 0x01	; 1
 1cc:	81 e4       	ldi	r24, 0x41	; 65
 1ce:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
				break;
		}
	}
	if ((normal_mode==0)&&(car_led_state==1))
 1d2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1d6:	81 11       	cpse	r24, r1
 1d8:	3b c0       	rjmp	.+118    	; 0x250 <app_start+0x17c>
 1da:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <car_led_state>
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	b9 f5       	brne	.+110    	; 0x250 <app_start+0x17c>
	{
		switch(car_led_state)
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	a9 f5       	brne	.+106    	; 0x250 <app_start+0x17c>
		{
			case 1:
		led_off(ped_port,ped_red);
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	82 e4       	ldi	r24, 0x42	; 66
 1ea:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
		led_on(ped_port,ped_green);
 1ee:	62 e0       	ldi	r22, 0x02	; 2
 1f0:	82 e4       	ldi	r24, 0x42	; 66
 1f2:	0e 94 3a 02 	call	0x474	; 0x474 <led_on>
		led_on(car_port,car_red);
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	81 e4       	ldi	r24, 0x41	; 65
 1fa:	0e 94 3a 02 	call	0x474	; 0x474 <led_on>
		timer0_delay_5s();
 1fe:	0e 94 7d 03 	call	0x6fa	; 0x6fa <timer0_delay_5s>
		for (i=0;i<=25;i++)
 202:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <i>
 206:	0f c0       	rjmp	.+30     	; 0x226 <app_start+0x152>
		{
			led_toggle(car_port,car_yellow);
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	81 e4       	ldi	r24, 0x41	; 65
 20c:	0e 94 42 02 	call	0x484	; 0x484 <led_toggle>
			led_toggle(ped_port,ped_yellow);
 210:	61 e0       	ldi	r22, 0x01	; 1
 212:	82 e4       	ldi	r24, 0x42	; 66
 214:	0e 94 42 02 	call	0x484	; 0x484 <led_toggle>
			timer0_delay_200ms();
 218:	0e 94 91 03 	call	0x722	; 0x722 <timer0_delay_200ms>
			case 1:
		led_off(ped_port,ped_red);
		led_on(ped_port,ped_green);
		led_on(car_port,car_red);
		timer0_delay_5s();
		for (i=0;i<=25;i++)
 21c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 220:	8f 5f       	subi	r24, 0xFF	; 255
 222:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <i>
 226:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 22a:	8a 31       	cpi	r24, 0x1A	; 26
 22c:	68 f3       	brcs	.-38     	; 0x208 <app_start+0x134>
		{
			led_toggle(car_port,car_yellow);
			led_toggle(ped_port,ped_yellow);
			timer0_delay_200ms();
		}
		led_off(car_port,car_yellow);
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	81 e4       	ldi	r24, 0x41	; 65
 232:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
		led_off(ped_port,ped_yellow);
 236:	61 e0       	ldi	r22, 0x01	; 1
 238:	82 e4       	ldi	r24, 0x42	; 66
 23a:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
		led_off(ped_port,ped_green);
 23e:	62 e0       	ldi	r22, 0x02	; 2
 240:	82 e4       	ldi	r24, 0x42	; 66
 242:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
		car_led_state=0;
 246:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <car_led_state>
		normal_mode=1;
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		break;
	}
	}
	if (((normal_mode==0)&&(car_led_state==2)) || ( (normal_mode==0)&&(car_led_state==2)&&(car_y_state==1) ))
 250:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 254:	81 11       	cpse	r24, r1
 256:	04 c0       	rjmp	.+8      	; 0x260 <app_start+0x18c>
 258:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <car_led_state>
 25c:	92 30       	cpi	r25, 0x02	; 2
 25e:	61 f0       	breq	.+24     	; 0x278 <app_start+0x1a4>
 260:	81 11       	cpse	r24, r1
 262:	6e c0       	rjmp	.+220    	; 0x340 <app_start+0x26c>
 264:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <car_led_state>
 268:	82 30       	cpi	r24, 0x02	; 2
 26a:	09 f0       	breq	.+2      	; 0x26e <app_start+0x19a>
 26c:	69 c0       	rjmp	.+210    	; 0x340 <app_start+0x26c>
 26e:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	09 f0       	breq	.+2      	; 0x278 <app_start+0x1a4>
 276:	64 c0       	rjmp	.+200    	; 0x340 <app_start+0x26c>
	{
		switch(car_led_state)
 278:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <car_led_state>
 27c:	82 30       	cpi	r24, 0x02	; 2
 27e:	09 f0       	breq	.+2      	; 0x282 <app_start+0x1ae>
 280:	5f c0       	rjmp	.+190    	; 0x340 <app_start+0x26c>
		{
			case 2:
			led_on(ped_port,ped_red);
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	82 e4       	ldi	r24, 0x42	; 66
 286:	0e 94 3a 02 	call	0x474	; 0x474 <led_on>
			led_on(car_port,car_green);
 28a:	62 e0       	ldi	r22, 0x02	; 2
 28c:	81 e4       	ldi	r24, 0x41	; 65
 28e:	0e 94 3a 02 	call	0x474	; 0x474 <led_on>
			for (i=0;i<=25;i++)
 292:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <i>
 296:	0f c0       	rjmp	.+30     	; 0x2b6 <app_start+0x1e2>
			{
				led_toggle(car_port,car_yellow);
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	81 e4       	ldi	r24, 0x41	; 65
 29c:	0e 94 42 02 	call	0x484	; 0x484 <led_toggle>
				led_toggle(ped_port,ped_yellow);
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	82 e4       	ldi	r24, 0x42	; 66
 2a4:	0e 94 42 02 	call	0x484	; 0x484 <led_toggle>
				timer0_delay_200ms();
 2a8:	0e 94 91 03 	call	0x722	; 0x722 <timer0_delay_200ms>
		switch(car_led_state)
		{
			case 2:
			led_on(ped_port,ped_red);
			led_on(car_port,car_green);
			for (i=0;i<=25;i++)
 2ac:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 2b0:	8f 5f       	subi	r24, 0xFF	; 255
 2b2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <i>
 2b6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 2ba:	8a 31       	cpi	r24, 0x1A	; 26
 2bc:	68 f3       	brcs	.-38     	; 0x298 <app_start+0x1c4>
			{
				led_toggle(car_port,car_yellow);
				led_toggle(ped_port,ped_yellow);
				timer0_delay_200ms();
			}
			led_off(car_port,car_yellow);
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	81 e4       	ldi	r24, 0x41	; 65
 2c2:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
			led_off(ped_port,ped_yellow);
 2c6:	61 e0       	ldi	r22, 0x01	; 1
 2c8:	82 e4       	ldi	r24, 0x42	; 66
 2ca:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
			led_off(car_port,car_green);
 2ce:	62 e0       	ldi	r22, 0x02	; 2
 2d0:	81 e4       	ldi	r24, 0x41	; 65
 2d2:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
			led_off(ped_port,ped_red);
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	82 e4       	ldi	r24, 0x42	; 66
 2da:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
			led_on(car_port,car_red);
 2de:	60 e0       	ldi	r22, 0x00	; 0
 2e0:	81 e4       	ldi	r24, 0x41	; 65
 2e2:	0e 94 3a 02 	call	0x474	; 0x474 <led_on>
			led_on(ped_port,ped_green);
 2e6:	62 e0       	ldi	r22, 0x02	; 2
 2e8:	82 e4       	ldi	r24, 0x42	; 66
 2ea:	0e 94 3a 02 	call	0x474	; 0x474 <led_on>
			timer0_delay_5s();
 2ee:	0e 94 7d 03 	call	0x6fa	; 0x6fa <timer0_delay_5s>
			for (i=0;i<=25;i++)
 2f2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <i>
 2f6:	0f c0       	rjmp	.+30     	; 0x316 <app_start+0x242>
			{
				led_toggle(car_port,car_yellow);
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	81 e4       	ldi	r24, 0x41	; 65
 2fc:	0e 94 42 02 	call	0x484	; 0x484 <led_toggle>
				led_toggle(ped_port,ped_yellow);
 300:	61 e0       	ldi	r22, 0x01	; 1
 302:	82 e4       	ldi	r24, 0x42	; 66
 304:	0e 94 42 02 	call	0x484	; 0x484 <led_toggle>
				timer0_delay_200ms();
 308:	0e 94 91 03 	call	0x722	; 0x722 <timer0_delay_200ms>
			led_off(car_port,car_green);
			led_off(ped_port,ped_red);
			led_on(car_port,car_red);
			led_on(ped_port,ped_green);
			timer0_delay_5s();
			for (i=0;i<=25;i++)
 30c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 310:	8f 5f       	subi	r24, 0xFF	; 255
 312:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <i>
 316:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 31a:	8a 31       	cpi	r24, 0x1A	; 26
 31c:	68 f3       	brcs	.-38     	; 0x2f8 <app_start+0x224>
			{
				led_toggle(car_port,car_yellow);
				led_toggle(ped_port,ped_yellow);
				timer0_delay_200ms();
			}
			led_off(car_port,car_yellow);
 31e:	61 e0       	ldi	r22, 0x01	; 1
 320:	81 e4       	ldi	r24, 0x41	; 65
 322:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
			led_off(ped_port,ped_yellow);
 326:	61 e0       	ldi	r22, 0x01	; 1
 328:	82 e4       	ldi	r24, 0x42	; 66
 32a:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
			led_off(ped_port,ped_green);
 32e:	62 e0       	ldi	r22, 0x02	; 2
 330:	82 e4       	ldi	r24, 0x42	; 66
 332:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
			car_led_state=0;
 336:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <car_led_state>
			normal_mode=1;
 33a:	81 e0       	ldi	r24, 0x01	; 1
 33c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;
		}
	}
	if ( (normal_mode==0)&&(car_led_state==1)&&(car_y_state==1) )
 340:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 344:	81 11       	cpse	r24, r1
 346:	6c c0       	rjmp	.+216    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 348:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <car_led_state>
 34c:	81 30       	cpi	r24, 0x01	; 1
 34e:	09 f0       	breq	.+2      	; 0x352 <app_start+0x27e>
 350:	67 c0       	rjmp	.+206    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 352:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
 356:	91 30       	cpi	r25, 0x01	; 1
 358:	09 f0       	breq	.+2      	; 0x35c <app_start+0x288>
 35a:	62 c0       	rjmp	.+196    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
	{
		switch(car_led_state)
 35c:	82 30       	cpi	r24, 0x02	; 2
 35e:	09 f0       	breq	.+2      	; 0x362 <app_start+0x28e>
 360:	5f c0       	rjmp	.+190    	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
		{
			case 2:
			led_on(ped_port,ped_red);
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	82 e4       	ldi	r24, 0x42	; 66
 366:	0e 94 3a 02 	call	0x474	; 0x474 <led_on>
			led_on(car_port,car_red);
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	81 e4       	ldi	r24, 0x41	; 65
 36e:	0e 94 3a 02 	call	0x474	; 0x474 <led_on>
			for (i=0;i<=25;i++)
 372:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <i>
 376:	0f c0       	rjmp	.+30     	; 0x396 <app_start+0x2c2>
			{
				led_toggle(car_port,car_yellow);
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	81 e4       	ldi	r24, 0x41	; 65
 37c:	0e 94 42 02 	call	0x484	; 0x484 <led_toggle>
				led_toggle(ped_port,ped_yellow);
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	82 e4       	ldi	r24, 0x42	; 66
 384:	0e 94 42 02 	call	0x484	; 0x484 <led_toggle>
				timer0_delay_200ms();
 388:	0e 94 91 03 	call	0x722	; 0x722 <timer0_delay_200ms>
		switch(car_led_state)
		{
			case 2:
			led_on(ped_port,ped_red);
			led_on(car_port,car_red);
			for (i=0;i<=25;i++)
 38c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 390:	8f 5f       	subi	r24, 0xFF	; 255
 392:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <i>
 396:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 39a:	8a 31       	cpi	r24, 0x1A	; 26
 39c:	68 f3       	brcs	.-38     	; 0x378 <app_start+0x2a4>
			{
				led_toggle(car_port,car_yellow);
				led_toggle(ped_port,ped_yellow);
				timer0_delay_200ms();
			}
			led_off(car_port,car_yellow);
 39e:	61 e0       	ldi	r22, 0x01	; 1
 3a0:	81 e4       	ldi	r24, 0x41	; 65
 3a2:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
			led_off(ped_port,ped_yellow);
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	82 e4       	ldi	r24, 0x42	; 66
 3aa:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
			led_off(car_port,car_green);
 3ae:	62 e0       	ldi	r22, 0x02	; 2
 3b0:	81 e4       	ldi	r24, 0x41	; 65
 3b2:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
			led_on(car_port,car_red);
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	81 e4       	ldi	r24, 0x41	; 65
 3ba:	0e 94 3a 02 	call	0x474	; 0x474 <led_on>
			led_off(ped_port,ped_red);
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	82 e4       	ldi	r24, 0x42	; 66
 3c2:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
			led_on(ped_port,ped_green);
 3c6:	62 e0       	ldi	r22, 0x02	; 2
 3c8:	82 e4       	ldi	r24, 0x42	; 66
 3ca:	0e 94 3a 02 	call	0x474	; 0x474 <led_on>
			timer0_delay_5s();
 3ce:	0e 94 7d 03 	call	0x6fa	; 0x6fa <timer0_delay_5s>
			for (i=0;i<=25;i++)
 3d2:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <i>
 3d6:	0f c0       	rjmp	.+30     	; 0x3f6 <app_start+0x322>
			{
				led_toggle(car_port,car_yellow);
 3d8:	61 e0       	ldi	r22, 0x01	; 1
 3da:	81 e4       	ldi	r24, 0x41	; 65
 3dc:	0e 94 42 02 	call	0x484	; 0x484 <led_toggle>
				led_toggle(ped_port,ped_yellow);
 3e0:	61 e0       	ldi	r22, 0x01	; 1
 3e2:	82 e4       	ldi	r24, 0x42	; 66
 3e4:	0e 94 42 02 	call	0x484	; 0x484 <led_toggle>
				timer0_delay_200ms();
 3e8:	0e 94 91 03 	call	0x722	; 0x722 <timer0_delay_200ms>
			led_off(car_port,car_green);
			led_on(car_port,car_red);
			led_off(ped_port,ped_red);
			led_on(ped_port,ped_green);
			timer0_delay_5s();
			for (i=0;i<=25;i++)
 3ec:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 3f0:	8f 5f       	subi	r24, 0xFF	; 255
 3f2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <i>
 3f6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <i>
 3fa:	8a 31       	cpi	r24, 0x1A	; 26
 3fc:	68 f3       	brcs	.-38     	; 0x3d8 <app_start+0x304>
			{
				led_toggle(car_port,car_yellow);
				led_toggle(ped_port,ped_yellow);
				timer0_delay_200ms();
			}
			led_off(car_port,car_yellow);
 3fe:	61 e0       	ldi	r22, 0x01	; 1
 400:	81 e4       	ldi	r24, 0x41	; 65
 402:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
			led_off(ped_port,ped_yellow);
 406:	61 e0       	ldi	r22, 0x01	; 1
 408:	82 e4       	ldi	r24, 0x42	; 66
 40a:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
			led_off(ped_port,ped_green);
 40e:	62 e0       	ldi	r22, 0x02	; 2
 410:	82 e4       	ldi	r24, 0x42	; 66
 412:	0e 94 3e 02 	call	0x47c	; 0x47c <led_off>
			car_led_state=0;
 416:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <car_led_state>
			normal_mode=1;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 420:	08 95       	ret

00000422 <__vector_1>:
			break;
		}
	}
}
ISR(EXT_INT_0)
{
 422:	1f 92       	push	r1
 424:	0f 92       	push	r0
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	0f 92       	push	r0
 42a:	11 24       	eor	r1, r1
 42c:	8f 93       	push	r24
	if((((PINA & (1<<car_red))>>car_red)==1))
 42e:	c8 9b       	sbis	0x19, 0	; 25
 430:	05 c0       	rjmp	.+10     	; 0x43c <__vector_1+0x1a>
	{
		car_led_state=1;
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <car_led_state>
		normal_mode=0;
 438:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	if ((((PINA & (1<<car_green))>>car_green)==1))
 43c:	ca 9b       	sbis	0x19, 2	; 25
 43e:	05 c0       	rjmp	.+10     	; 0x44a <__vector_1+0x28>
	{
		car_led_state=2;
 440:	82 e0       	ldi	r24, 0x02	; 2
 442:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <car_led_state>
		normal_mode=0;
 446:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>

	}
	if ((((PINA & (1<<car_yellow))>>car_yellow)==1))
 44a:	c9 9b       	sbis	0x19, 1	; 25
 44c:	05 c0       	rjmp	.+10     	; 0x458 <__vector_1+0x36>
	{
		car_y_state=1;
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		normal_mode=0;
 454:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>

	}
}
 458:	8f 91       	pop	r24
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <button_init>:
#include "../ECUAL/BUTTON/button.h"


void button_init(uint8_t buttonport,uint8_t buttonpin)
{
	DIO_init(buttonport,buttonpin,IN);
 464:	40 e0       	ldi	r20, 0x00	; 0
 466:	0e 94 4a 02 	call	0x494	; 0x494 <DIO_init>
 46a:	08 95       	ret

0000046c <led_init>:
#include "../ECUAL/LED/led.h"
#include "../MCAL/DIO/DIO.h"

void led_init(uint8_t ledport ,uint8_t ledpin)
{
	DIO_init(ledport,ledpin,OUT);
 46c:	41 e0       	ldi	r20, 0x01	; 1
 46e:	0e 94 4a 02 	call	0x494	; 0x494 <DIO_init>
 472:	08 95       	ret

00000474 <led_on>:
}
void led_on(uint8_t ledport ,uint8_t ledpin)
{
	DIO_write(ledport,ledpin,HIGH);
 474:	41 e0       	ldi	r20, 0x01	; 1
 476:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
 47a:	08 95       	ret

0000047c <led_off>:
}
void led_off(uint8_t ledport ,uint8_t ledpin)
{
	DIO_write(ledport,ledpin,LOW);
 47c:	40 e0       	ldi	r20, 0x00	; 0
 47e:	0e 94 c2 02 	call	0x584	; 0x584 <DIO_write>
 482:	08 95       	ret

00000484 <led_toggle>:
}
void led_toggle(uint8_t ledport ,uint8_t ledpin)
{
	DIO_toggle(ledport,ledpin);
 484:	0e 94 3a 03 	call	0x674	; 0x674 <DIO_toggle>
 488:	08 95       	ret

0000048a <main>:
 */ 
#include "../APPLICATION/application.h"
int main(void)
{
    /* Replace with your application code */
	app_init();
 48a:	0e 94 49 00 	call	0x92	; 0x92 <app_init>
    while (1) 
    {
		app_start();
 48e:	0e 94 6a 00 	call	0xd4	; 0xd4 <app_start>
 492:	fd cf       	rjmp	.-6      	; 0x48e <main+0x4>

00000494 <DIO_init>:
#include "../DIO/DIO.h"

void DIO_init(uint8_t portnumber,uint8_t pinnumber,uint8_t direction)
{
	
	switch(portnumber)
 494:	82 34       	cpi	r24, 0x42	; 66
 496:	29 f1       	breq	.+74     	; 0x4e2 <DIO_init+0x4e>
 498:	18 f4       	brcc	.+6      	; 0x4a0 <DIO_init+0xc>
 49a:	81 34       	cpi	r24, 0x41	; 65
 49c:	39 f0       	breq	.+14     	; 0x4ac <DIO_init+0x18>
 49e:	08 95       	ret
 4a0:	83 34       	cpi	r24, 0x43	; 67
 4a2:	d1 f1       	breq	.+116    	; 0x518 <DIO_init+0x84>
 4a4:	84 34       	cpi	r24, 0x44	; 68
 4a6:	09 f4       	brne	.+2      	; 0x4aa <DIO_init+0x16>
 4a8:	52 c0       	rjmp	.+164    	; 0x54e <DIO_init+0xba>
 4aa:	08 95       	ret
	{
		
		case PORT_A:
		     if(direction==OUT)
 4ac:	41 30       	cpi	r20, 0x01	; 1
 4ae:	59 f4       	brne	.+22     	; 0x4c6 <DIO_init+0x32>
		{
			
		    DDRA |=(1<<pinnumber);//SET PIN TO OUTPUT
 4b0:	2a b3       	in	r18, 0x1a	; 26
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <DIO_init+0x28>
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	6a 95       	dec	r22
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <DIO_init+0x24>
 4c0:	82 2b       	or	r24, r18
 4c2:	8a bb       	out	0x1a, r24	; 26
 4c4:	08 95       	ret
		
		}
		else if(direction==IN)
 4c6:	41 11       	cpse	r20, r1
 4c8:	5c c0       	rjmp	.+184    	; 0x582 <DIO_init+0xee>
		{
		    DDRA &=~(1<<pinnumber);//SET PIN TO OUTPUT
 4ca:	2a b3       	in	r18, 0x1a	; 26
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <DIO_init+0x42>
 4d2:	88 0f       	add	r24, r24
 4d4:	99 1f       	adc	r25, r25
 4d6:	6a 95       	dec	r22
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <DIO_init+0x3e>
 4da:	80 95       	com	r24
 4dc:	82 23       	and	r24, r18
 4de:	8a bb       	out	0x1a, r24	; 26
 4e0:	08 95       	ret
		{
			//error handling 
		}
		break;
		case PORT_B:
		if(direction==OUT)
 4e2:	41 30       	cpi	r20, 0x01	; 1
 4e4:	59 f4       	brne	.+22     	; 0x4fc <DIO_init+0x68>
		{
			
			DDRB |=(1<<pinnumber);//SET PIN TO OUTPUT
 4e6:	27 b3       	in	r18, 0x17	; 23
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <DIO_init+0x5e>
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	6a 95       	dec	r22
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <DIO_init+0x5a>
 4f6:	82 2b       	or	r24, r18
 4f8:	87 bb       	out	0x17, r24	; 23
 4fa:	08 95       	ret
			
		}
		else if(direction==IN)
 4fc:	41 11       	cpse	r20, r1
 4fe:	41 c0       	rjmp	.+130    	; 0x582 <DIO_init+0xee>
		{
			DDRB &=~(1<<pinnumber);//SET PIN TO OUTPUT
 500:	27 b3       	in	r18, 0x17	; 23
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_init+0x78>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	6a 95       	dec	r22
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_init+0x74>
 510:	80 95       	com	r24
 512:	82 23       	and	r24, r18
 514:	87 bb       	out	0x17, r24	; 23
 516:	08 95       	ret
			//error handling
		}
				break;

		case PORT_C:
		if(direction==OUT)
 518:	41 30       	cpi	r20, 0x01	; 1
 51a:	59 f4       	brne	.+22     	; 0x532 <DIO_init+0x9e>
		{
			
			DDRC |=(1<<pinnumber);//SET PIN TO OUTPUT
 51c:	24 b3       	in	r18, 0x14	; 20
 51e:	81 e0       	ldi	r24, 0x01	; 1
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_init+0x94>
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	6a 95       	dec	r22
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_init+0x90>
 52c:	82 2b       	or	r24, r18
 52e:	84 bb       	out	0x14, r24	; 20
 530:	08 95       	ret
			
		}
		else if(direction==IN)
 532:	41 11       	cpse	r20, r1
 534:	26 c0       	rjmp	.+76     	; 0x582 <DIO_init+0xee>
		{
			DDRC &=~(1<<pinnumber);//SET PIN TO OUTPUT
 536:	24 b3       	in	r18, 0x14	; 20
 538:	81 e0       	ldi	r24, 0x01	; 1
 53a:	90 e0       	ldi	r25, 0x00	; 0
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_init+0xae>
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_init+0xaa>
 546:	80 95       	com	r24
 548:	82 23       	and	r24, r18
 54a:	84 bb       	out	0x14, r24	; 20
 54c:	08 95       	ret
			//error handling
		}
				break;

		case PORT_D:
		if(direction==OUT)
 54e:	41 30       	cpi	r20, 0x01	; 1
 550:	59 f4       	brne	.+22     	; 0x568 <DIO_init+0xd4>
		{
			
			DDRD |=(1<<pinnumber);//SET PIN TO OUTPUT
 552:	21 b3       	in	r18, 0x11	; 17
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_init+0xca>
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	6a 95       	dec	r22
 560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_init+0xc6>
 562:	82 2b       	or	r24, r18
 564:	81 bb       	out	0x11, r24	; 17
 566:	08 95       	ret
			
		}
		else if(direction==IN)
 568:	41 11       	cpse	r20, r1
 56a:	0b c0       	rjmp	.+22     	; 0x582 <DIO_init+0xee>
		{
			DDRD &=~(1<<pinnumber);//SET PIN TO OUTPUT
 56c:	21 b3       	in	r18, 0x11	; 17
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	02 c0       	rjmp	.+4      	; 0x578 <DIO_init+0xe4>
 574:	88 0f       	add	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	6a 95       	dec	r22
 57a:	e2 f7       	brpl	.-8      	; 0x574 <DIO_init+0xe0>
 57c:	80 95       	com	r24
 57e:	82 23       	and	r24, r18
 580:	81 bb       	out	0x11, r24	; 17
 582:	08 95       	ret

00000584 <DIO_write>:

void DIO_write(uint8_t portnumber,uint8_t pinnumber,uint8_t value)
{
	
		
		switch(portnumber)
 584:	82 34       	cpi	r24, 0x42	; 66
 586:	29 f1       	breq	.+74     	; 0x5d2 <DIO_write+0x4e>
 588:	18 f4       	brcc	.+6      	; 0x590 <DIO_write+0xc>
 58a:	81 34       	cpi	r24, 0x41	; 65
 58c:	39 f0       	breq	.+14     	; 0x59c <DIO_write+0x18>
 58e:	08 95       	ret
 590:	83 34       	cpi	r24, 0x43	; 67
 592:	d1 f1       	breq	.+116    	; 0x608 <DIO_write+0x84>
 594:	84 34       	cpi	r24, 0x44	; 68
 596:	09 f4       	brne	.+2      	; 0x59a <DIO_write+0x16>
 598:	52 c0       	rjmp	.+164    	; 0x63e <DIO_write+0xba>
 59a:	08 95       	ret
		{
			
			case PORT_A:
			    if(value==HIGH)
 59c:	41 30       	cpi	r20, 0x01	; 1
 59e:	59 f4       	brne	.+22     	; 0x5b6 <DIO_write+0x32>
			    {
				
				PORTA |=(1<<pinnumber);//SET PIN TO 1
 5a0:	2b b3       	in	r18, 0x1b	; 27
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	90 e0       	ldi	r25, 0x00	; 0
 5a6:	02 c0       	rjmp	.+4      	; 0x5ac <DIO_write+0x28>
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	6a 95       	dec	r22
 5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <DIO_write+0x24>
 5b0:	82 2b       	or	r24, r18
 5b2:	8b bb       	out	0x1b, r24	; 27
 5b4:	08 95       	ret
				
			    }
			    else if(value==LOW)
 5b6:	41 11       	cpse	r20, r1
 5b8:	5c c0       	rjmp	.+184    	; 0x672 <DIO_write+0xee>
			   {
				PORTA &=~(1<<pinnumber);//SET PIN TO 0
 5ba:	2b b3       	in	r18, 0x1b	; 27
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_write+0x42>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	6a 95       	dec	r22
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_write+0x3e>
 5ca:	80 95       	com	r24
 5cc:	82 23       	and	r24, r18
 5ce:	8b bb       	out	0x1b, r24	; 27
 5d0:	08 95       	ret
				//error handling
			   }
			break;
			
			case PORT_B:
			if(value==HIGH)
 5d2:	41 30       	cpi	r20, 0x01	; 1
 5d4:	59 f4       	brne	.+22     	; 0x5ec <DIO_write+0x68>
			{
				
				PORTB |=(1<<pinnumber);//SET PIN TO 1
 5d6:	28 b3       	in	r18, 0x18	; 24
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <DIO_write+0x5e>
 5de:	88 0f       	add	r24, r24
 5e0:	99 1f       	adc	r25, r25
 5e2:	6a 95       	dec	r22
 5e4:	e2 f7       	brpl	.-8      	; 0x5de <DIO_write+0x5a>
 5e6:	82 2b       	or	r24, r18
 5e8:	88 bb       	out	0x18, r24	; 24
 5ea:	08 95       	ret
				
			}
			else if(value==LOW)
 5ec:	41 11       	cpse	r20, r1
 5ee:	41 c0       	rjmp	.+130    	; 0x672 <DIO_write+0xee>
			{
				PORTB &=~(1<<pinnumber);//SET PIN TO 0
 5f0:	28 b3       	in	r18, 0x18	; 24
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <DIO_write+0x78>
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	6a 95       	dec	r22
 5fe:	e2 f7       	brpl	.-8      	; 0x5f8 <DIO_write+0x74>
 600:	80 95       	com	r24
 602:	82 23       	and	r24, r18
 604:	88 bb       	out	0x18, r24	; 24
 606:	08 95       	ret
				//error handling
			}
			break;

			case PORT_C:
			if(value==HIGH)
 608:	41 30       	cpi	r20, 0x01	; 1
 60a:	59 f4       	brne	.+22     	; 0x622 <DIO_write+0x9e>
			{
				
				PORTC |=(1<<pinnumber);//SET PIN TO 1
 60c:	25 b3       	in	r18, 0x15	; 21
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	02 c0       	rjmp	.+4      	; 0x618 <DIO_write+0x94>
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	6a 95       	dec	r22
 61a:	e2 f7       	brpl	.-8      	; 0x614 <DIO_write+0x90>
 61c:	82 2b       	or	r24, r18
 61e:	85 bb       	out	0x15, r24	; 21
 620:	08 95       	ret
				
			}
			else if(value==LOW)
 622:	41 11       	cpse	r20, r1
 624:	26 c0       	rjmp	.+76     	; 0x672 <DIO_write+0xee>
			{
				PORTC &=~(1<<pinnumber);//SET PIN TO 0
 626:	25 b3       	in	r18, 0x15	; 21
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	02 c0       	rjmp	.+4      	; 0x632 <DIO_write+0xae>
 62e:	88 0f       	add	r24, r24
 630:	99 1f       	adc	r25, r25
 632:	6a 95       	dec	r22
 634:	e2 f7       	brpl	.-8      	; 0x62e <DIO_write+0xaa>
 636:	80 95       	com	r24
 638:	82 23       	and	r24, r18
 63a:	85 bb       	out	0x15, r24	; 21
 63c:	08 95       	ret
				//error handling
			}
			break;

			case PORT_D:
			if(value==HIGH)
 63e:	41 30       	cpi	r20, 0x01	; 1
 640:	59 f4       	brne	.+22     	; 0x658 <DIO_write+0xd4>
			{
				
				PORTD |=(1<<pinnumber);//SET PIN TO 1
 642:	22 b3       	in	r18, 0x12	; 18
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	02 c0       	rjmp	.+4      	; 0x64e <DIO_write+0xca>
 64a:	88 0f       	add	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	6a 95       	dec	r22
 650:	e2 f7       	brpl	.-8      	; 0x64a <DIO_write+0xc6>
 652:	82 2b       	or	r24, r18
 654:	82 bb       	out	0x12, r24	; 18
 656:	08 95       	ret
				
			}
			else if(value==LOW)
 658:	41 11       	cpse	r20, r1
 65a:	0b c0       	rjmp	.+22     	; 0x672 <DIO_write+0xee>
			{
				PORTD &=~(1<<pinnumber);//SET PIN TO 0
 65c:	22 b3       	in	r18, 0x12	; 18
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_write+0xe4>
 664:	88 0f       	add	r24, r24
 666:	99 1f       	adc	r25, r25
 668:	6a 95       	dec	r22
 66a:	e2 f7       	brpl	.-8      	; 0x664 <DIO_write+0xe0>
 66c:	80 95       	com	r24
 66e:	82 23       	and	r24, r18
 670:	82 bb       	out	0x12, r24	; 18
 672:	08 95       	ret

00000674 <DIO_toggle>:
	
}

void DIO_toggle(uint8_t portnumber,uint8_t pinnumber)
{
	switch(portnumber)
 674:	82 34       	cpi	r24, 0x42	; 66
 676:	a1 f0       	breq	.+40     	; 0x6a0 <DIO_toggle+0x2c>
 678:	18 f4       	brcc	.+6      	; 0x680 <DIO_toggle+0xc>
 67a:	81 34       	cpi	r24, 0x41	; 65
 67c:	31 f0       	breq	.+12     	; 0x68a <DIO_toggle+0x16>
 67e:	08 95       	ret
 680:	83 34       	cpi	r24, 0x43	; 67
 682:	c9 f0       	breq	.+50     	; 0x6b6 <DIO_toggle+0x42>
 684:	84 34       	cpi	r24, 0x44	; 68
 686:	11 f1       	breq	.+68     	; 0x6cc <DIO_toggle+0x58>
 688:	08 95       	ret
	{
		case PORT_A:
			PORTA^=(1<<pinnumber);//TOGGLE
 68a:	2b b3       	in	r18, 0x1b	; 27
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	02 c0       	rjmp	.+4      	; 0x696 <DIO_toggle+0x22>
 692:	88 0f       	add	r24, r24
 694:	99 1f       	adc	r25, r25
 696:	6a 95       	dec	r22
 698:	e2 f7       	brpl	.-8      	; 0x692 <DIO_toggle+0x1e>
 69a:	82 27       	eor	r24, r18
 69c:	8b bb       	out	0x1b, r24	; 27
			break;
 69e:	08 95       	ret
		case PORT_B:
			PORTB^=(1<<pinnumber);//TOGGLE
 6a0:	28 b3       	in	r18, 0x18	; 24
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <DIO_toggle+0x38>
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	6a 95       	dec	r22
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <DIO_toggle+0x34>
 6b0:	82 27       	eor	r24, r18
 6b2:	88 bb       	out	0x18, r24	; 24
			break;
 6b4:	08 95       	ret
		case PORT_C:
			PORTC^=(1<<pinnumber);//TOGGLE
 6b6:	25 b3       	in	r18, 0x15	; 21
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	02 c0       	rjmp	.+4      	; 0x6c2 <DIO_toggle+0x4e>
 6be:	88 0f       	add	r24, r24
 6c0:	99 1f       	adc	r25, r25
 6c2:	6a 95       	dec	r22
 6c4:	e2 f7       	brpl	.-8      	; 0x6be <DIO_toggle+0x4a>
 6c6:	82 27       	eor	r24, r18
 6c8:	85 bb       	out	0x15, r24	; 21
			break;
 6ca:	08 95       	ret
		case PORT_D:
			PORTD^=(1<<pinnumber);//TOGGLE
 6cc:	22 b3       	in	r18, 0x12	; 18
 6ce:	81 e0       	ldi	r24, 0x01	; 1
 6d0:	90 e0       	ldi	r25, 0x00	; 0
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <DIO_toggle+0x64>
 6d4:	88 0f       	add	r24, r24
 6d6:	99 1f       	adc	r25, r25
 6d8:	6a 95       	dec	r22
 6da:	e2 f7       	brpl	.-8      	; 0x6d4 <DIO_toggle+0x60>
 6dc:	82 27       	eor	r24, r18
 6de:	82 bb       	out	0x12, r24	; 18
 6e0:	08 95       	ret

000006e2 <interupt_INT0_EN>:
 *  Author: TAHER ELSHEIKH
 */ 
#include "../MCAL/interupts/INT0_INTERUPT.h"
void interupt_INT0_EN(void)
{
	SREG |= (1<<7);//GLOBAL INTERUPS ENABLE
 6e2:	8f b7       	in	r24, 0x3f	; 63
 6e4:	80 68       	ori	r24, 0x80	; 128
 6e6:	8f bf       	out	0x3f, r24	; 63
	MCUCR|= (1<<0)|(1<<1);//INTERUPTS SENSE RISING EDGE
 6e8:	85 b7       	in	r24, 0x35	; 53
 6ea:	83 60       	ori	r24, 0x03	; 3
 6ec:	85 bf       	out	0x35, r24	; 53
	GICR|=(1<<6);//ENABLE INT0 INTERUPT
 6ee:	8b b7       	in	r24, 0x3b	; 59
 6f0:	80 64       	ori	r24, 0x40	; 64
 6f2:	8b bf       	out	0x3b, r24	; 59
 6f4:	08 95       	ret

000006f6 <timer0_init>:
#include "../MCAL/TIMER/timer.h"
#include <math.h>
//set timer0 in normal mode
void timer0_init(void)
{
	TCCR0=0x00;
 6f6:	13 be       	out	0x33, r1	; 51
 6f8:	08 95       	ret

000006fa <timer0_delay_5s>:
}
//delay function with 1024 prescaler 
void timer0_delay_5s(void)
{
	int counter_ovf=0;
	TCNT0=0x00;
 6fa:	12 be       	out	0x32, r1	; 50
	TCCR0 |= (1<<0)| (1<<2);
 6fc:	83 b7       	in	r24, 0x33	; 51
 6fe:	85 60       	ori	r24, 0x05	; 5
 700:	83 bf       	out	0x33, r24	; 51
	TCCR0=0x00;
}
//delay function with 1024 prescaler 
void timer0_delay_5s(void)
{
	int counter_ovf=0;
 702:	20 e0       	ldi	r18, 0x00	; 0
 704:	30 e0       	ldi	r19, 0x00	; 0
	TCNT0=0x00;
	TCCR0 |= (1<<0)| (1<<2);
	while(counter_ovf<19)
 706:	08 c0       	rjmp	.+16     	; 0x718 <timer0_delay_5s+0x1e>
	{
		while ((TIFR&(1<<0))==0);
 708:	08 b6       	in	r0, 0x38	; 56
 70a:	00 fe       	sbrs	r0, 0
 70c:	fd cf       	rjmp	.-6      	; 0x708 <timer0_delay_5s+0xe>
		TIFR |= (1<<0);
 70e:	88 b7       	in	r24, 0x38	; 56
 710:	81 60       	ori	r24, 0x01	; 1
 712:	88 bf       	out	0x38, r24	; 56
		counter_ovf++;
 714:	2f 5f       	subi	r18, 0xFF	; 255
 716:	3f 4f       	sbci	r19, 0xFF	; 255
void timer0_delay_5s(void)
{
	int counter_ovf=0;
	TCNT0=0x00;
	TCCR0 |= (1<<0)| (1<<2);
	while(counter_ovf<19)
 718:	23 31       	cpi	r18, 0x13	; 19
 71a:	31 05       	cpc	r19, r1
 71c:	ac f3       	brlt	.-22     	; 0x708 <timer0_delay_5s+0xe>
	{
		while ((TIFR&(1<<0))==0);
		TIFR |= (1<<0);
		counter_ovf++;
	}
	TCCR0=0x00;
 71e:	13 be       	out	0x33, r1	; 51
 720:	08 95       	ret

00000722 <timer0_delay_200ms>:
}
void timer0_delay_200ms(void)
{
	TCNT0=0x3D;
 722:	8d e3       	ldi	r24, 0x3D	; 61
 724:	82 bf       	out	0x32, r24	; 50
	TCCR0 |= (1<<0)| (1<<2);
 726:	83 b7       	in	r24, 0x33	; 51
 728:	85 60       	ori	r24, 0x05	; 5
 72a:	83 bf       	out	0x33, r24	; 51
	
		while ((TIFR&(1<<0))==0);
 72c:	08 b6       	in	r0, 0x38	; 56
 72e:	00 fe       	sbrs	r0, 0
 730:	fd cf       	rjmp	.-6      	; 0x72c <timer0_delay_200ms+0xa>
		TIFR |= (1<<0);
 732:	88 b7       	in	r24, 0x38	; 56
 734:	81 60       	ori	r24, 0x01	; 1
 736:	88 bf       	out	0x38, r24	; 56
		
	TCCR0=0x00;
 738:	13 be       	out	0x33, r1	; 51
 73a:	08 95       	ret

0000073c <_exit>:
 73c:	f8 94       	cli

0000073e <__stop_program>:
 73e:	ff cf       	rjmp	.-2      	; 0x73e <__stop_program>
